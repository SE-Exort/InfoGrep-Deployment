# Default values for infogrep.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Provide a name in place of `infogrep`
nameOverride: infogrep
# -- String to fully override `"infogrep.fullname"`
fullnameOverride: ""
# -- Override the Kubernetes version, which is used to evaluate certain manifests
kubeVersionOverride: ""
# Override APIVersions
# If you want to template helm charts but cannot access k8s API server
# you can set api versions here
apiVersionOverrides: {}
replicaCount: 1
namespace: infogrep
domain: local.infogrep.ai

KeyConfig:
  openaiKey: ""
  serpapiKey: ""

# -- Ai Service Config
AiService:
  name: ai-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/ai-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: ai-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 8004
  # -- Resource Limits
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: ClusterIP
    nodePortHttp: 30080
    servicePortHttp: 8004
    targetPortHttp: 8004
    servicePortHttpName: ai-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
  # -- Ingress configuration
  ingress:
    enabled: true
    controller: generic
    labels: {}
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
      kubernetes.io/ingress.class: "nginx"
    ingressClassName: nginx
    hostname: ""
    path: /
    pathType: Prefix
    tls: false
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
  # -- Ollama Container Configuration
  ollamaCreate: "true"
  ollamaImage:
    repository: ollama/ollama
    pullPolicy: Always
    tag: latest
    ports: 11434
    resources:
      limits:
        cpu: 2
        memory: 8Gi
      requests:
        cpu: 1
        memory: 8Gi

# -- Authentication Service Config
AuthService:
  name: auth-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/auth-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: auth-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 4000
  # -- Resource Limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 500m
      memory: 512Mi
  env:
    CLIENT_ID: ""
    CLIENT_SECRET: "" 
    DOMAIN: ""
    APP_SECRET_KEY: ""
    AUTH_MODE: ""
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: ClusterIP
    nodePortHttp: 30081
    servicePortHttp: 4000
    targetPortHttp: 4000
    servicePortHttpName: auth-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None

# -- Chatroom Service Config
ChatroomService:
  name: chatroom-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/chatroom-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: chatroom-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 8003
  # -- Resource Limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 500m
      memory: 512Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: ClusterIP
    nodePortHttp: 30084
    servicePortHttp: 8003
    targetPortHttp: 8003
    servicePortHttpName: chatroom-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None

# -- File Management Service Config
FileManagementService:
  name: file-management-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/file-management-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: file-management-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 8002
  # -- Resource Limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 500m
      memory: 512Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: ClusterIP
    nodePortHttp: 30086
    servicePortHttp: 8002
    targetPortHttp: 8002
    servicePortHttpName: file-management-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None

# -- Milvus Configurations
MilvusConfig:
  name: vectordb
  serviceType: ClusterIP
  standaloneReplica: 1
  resources:
    limits:
      cpu: 500m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  persistence:
    volumeName: infogrep-milvus-pv
    mountPath: "/export"
    storageClass: csi-cinder-high-speed
    size: 3Gi
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Delete
    nodeAffinity:
      required:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                  - nodepool-c3033ca4-523c-4377-8d-node-68ce5c
  env:
    username: "infogrep"
    password: "example"
    rootPassword: "example"

# -- Milvus Etcd Configs
MilvusEtcdConfig:
  name: vectordb-etcd
  replicaCount: 1
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 1Gi
  persistence:
    volumeName: infogrep-milvus-etcd-pv
    mountPath: ""
    storageClass: csi-cinder-high-speed
    size: 5Gi
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Delete
    nodeAffinity:
      required:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                  - nodepool-c3033ca4-523c-4377-8d-node-68ce5c

# -- Elasticsearch Configurations
ElasticsearchConfig:
  name: elasticsearch-logs
  replicaCount: 1
  defaultPodSpec: "true"
  resources:
    limits:
      cpu: 4
      memory: 8Gi
    requests:
      cpu: 2
      memory: 4Gi
  # -- PVC Config
  persistence:
    volumeName: infogrep-logging-es-pv
    mountPath: "/usr/share/elasticsearch/data"
    storageClass: csi-cinder-high-speed
    size: 5Gi
    accessModes:
      - ReadWriteOnce
    persistentVolumeReclaimPolicy: Delete
    nodeAffinity:
      required:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                  - nodepool-c3033ca4-523c-4377-8d-node-6ac736

# -- Kibana Configurations
KibanaConfig:
  name: kibana
  replicaCount: 1
  serviceType: ClusterIP
  defaultPodSpec: "false"
  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 150m
      memory: 1Gi

# -- Infogrep Postgres Configurations
InfogrepPostgres:
  # -- Infogrep Postgress Name
  name: postgres
  replicaCount: 2
  # -- Default Docker Hub Postgres Image
  image:
    repository: postgres
    pullPolicy: IfNotPresent
    tag: latest
  # -- Default namespace
  namespace: ""
  # -- Postgres Resource Config
  resources:
    limits:
      cpu: 1
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi
  # -- Container Ports
  containerPorts:
    postgres: 5432
  # -- PVC Config
  persistence:
    volumeName: infogrep-postgres-pv
    mountPath: "/var/lib/postgresql/data"
    storageClass: csi-cinder-high-speed
    size: 3Gi
    persistentVolumeReclaimPolicy: Delete
    accessModes:
      - ReadWriteOnce
    nodeAffinity:
      required:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                  - nodepool-c3033ca4-523c-4377-8d-node-c24533
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: ClusterIP
    nodePortHttp: 30082
    servicePortHttp: 5432
    targetPortHttp: 5432
    servicePortHttpName: database
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
  ## -- default user name and password for local host, please override this
  env:
    username: postgres
    password: example