# Default values for infogrep.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Provide a name in place of `infogrep`
nameOverride: infogrep
# -- String to fully override `"infogrep.fullname"`
fullnameOverride: ""
# -- Override the Kubernetes version, which is used to evaluate certain manifests
kubeVersionOverride: ""
# Override APIVersions
# If you want to template helm charts but cannot access k8s API server
# you can set api versions here
apiVersionOverrides: {}
replicaCount: 1
namespace: infogrep
domain: local.infogrep.ai
KeyConfig:
  openaiKey: ""
  serpapiKey: ""
# -- Default Env for All Service Pods
DefaultEnv:
  - name: AI_SERVICE_HOST
    valueFrom:
      configMapKeyRef:
        name: infogrep-service-url-config
        key: aiServiceHost
        optional: false
  - name: AUTH_SERVICE_HOST
    valueFrom:
      configMapKeyRef:
        name: infogrep-service-url-config
        key: authServiceHost
        optional: false
  - name: VIDEO_SERVICE_HOST
    valueFrom:
      configMapKeyRef:
        name: infogrep-service-url-config
        key: videoServiceHost
        optional: false
  - name: CHATROOM_SERVICE_HOST
    valueFrom:
      configMapKeyRef:
        name: infogrep-service-url-config
        key: chatroomServiceHost
        optional: false
  - name: PARSING_SERVICE_HOST
    valueFrom:
      configMapKeyRef:
        name: infogrep-service-url-config
        key: parsingServiceHost
        optional: false
  - name: FILE_MANAGEMENT_SERVICE_HOST
    valueFrom:
      configMapKeyRef:
        name: infogrep-service-url-config
        key: fileManagementServiceHost
        optional: false
  - name: VECTOR_MANAGEMENT_SERVICE_HOST
    valueFrom:
      configMapKeyRef:
        name: infogrep-service-url-config
        key: vectorManagementServiceHost
        optional: false
  - name: UI_SERVICE_HOST
    valueFrom:
      configMapKeyRef:
        name: infogrep-service-url-config
        key: uiServiceHost
        optional: false
# -- Ai Service Config
AiService:
  name: ai-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/ai-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: ai-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 8004
  # -- Resource Limits
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30080
    servicePortHttp: 8004
    targetPortHttp: 8004
    servicePortHttpName: ai-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
  # -- Ingress configuration
  ingress:
    enabled: true
    controller: generic
    labels: {}
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
      kubernetes.io/ingress.class: "nginx"
    ingressClassName: nginx
    hostname: ""
    path: /
    pathType: Prefix
    tls: false
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []

# -- Authentication Service Config
AuthService:
  name: auth-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/auth-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: auth-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 4000
  # -- Resource Limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 500m
      memory: 128Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30081
    servicePortHttp: 4000
    targetPortHttp: 4000
    servicePortHttpName: auth-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
  # -- Authentication Service Init Containers
  initContainers:
    - name: wait-for-postgres
      image: busybox
      command: ["/bin/sh", "-c"]
      args:
        [
          "until echo 'Waiting for auth service postgres...' && nc -vz -w 2 $PGHOST 5432; do echo 'Looping forever...'; sleep 2; done;",
        ]
      env:
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              name: auth-service-pg-configs
              key: pgHost
              optional: false

# -- Auth Service Postgres Config
AuthPostgres:
  # -- Auth Postgress Name
  name: auth-postgres
  replicaCount: 1
  # -- Default Docker Hub Postgres Image
  image:
    repository: postgres
    pullPolicy: IfNotPresent
    tag: latest
  # -- Default namespace
  namespace: ""
  # -- Postgres Resource Config
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  # -- Container Ports
  containerPorts:
    postgres: 5432
  # -- Postgres Readiness Probe
  readinessProbe:
    enabled: true
    command:
      - "pg_isready"
      - "-U"
      - "postgres"
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30082
    servicePortHttp: 5432
    targetPortHttp: 5432
    servicePortHttpName: auth-postgres-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
  # -- Postgres Env
  env:
    username: postgres
    password: example
  # -- PVC Config
  persistence:
    claimName: auth-postgres-pv-claim
    volumeName: auth-postgres-pv
    mountPath: "/var/lib/postgresql/data"
    hostPath: "/data"
    storageClass: local-storage
    size: 2Gi
    accessModes:
      - ReadWriteOnce
    nodeAffinity:
      required:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                  - minikube

# -- Video Service Config
VideoService:
  name: video-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/video-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: video-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 8879
  # -- Resource Limits
  resources:
    limits:
      cpu: 1.0
      memory: 1Gi
    requests:
      cpu: 1.0
      memory: 512Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30083
    servicePortHttp: 8879
    targetPortHttp: 8879
    servicePortHttpName: video-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None

# -- Chatroom Service Config
ChatroomService:
  name: chatroom-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/chatroom-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: chatroom-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 8003
  # -- Resource Limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 500m
      memory: 128Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30084
    servicePortHttp: 8003
    targetPortHttp: 8003
    servicePortHttpName: chatroom-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None

# -- Parsing Service Config
ParsingService:
  name: parsing-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/parsing-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: parsing-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 8001
  # -- Resource Limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 500m
      memory: 128Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30085
    servicePortHttp: 8001
    targetPortHttp: 8001
    servicePortHttpName: parsing-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None

# -- File Management Service Config
FileManagementService:
  name: file-management-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/file-management-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: file-management-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 8002
  # -- Resource Limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 500m
      memory: 128Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30086
    servicePortHttp: 8002
    targetPortHttp: 8002
    servicePortHttpName: file-management-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None

# -- Vector Management Service Config
VectorManagementService:
  name: vector-management-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/vector-management-service
    pullPolicy: IfNotPresent
    tag: demo-6
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Vector Management Service Env
  env:
    MILVUS_HOST: placeholder_milvusservice
  # -- Service Account
  serviceAccount:
    create: true
    name: vector-management-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 8800
  # -- Resource Limits
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 1Gi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30087
    servicePortHttp: 8800
    targetPortHttp: 8800
    servicePortHttpName: vector-management-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
  # -- Vector Management Init Containers
  initContainers:
    - name: wait-for-milvus
      image: busybox
      command: ["/bin/sh", "-c"]
      args:
        [
          "until echo 'Waiting for vector milvus...' && nc -vz -w 2 $MILVUS_HOST 19530; do echo 'Looping forever...'; sleep 2; done;",
        ]
      env:
        - name: MILVUS_HOST
          valueFrom:
            configMapKeyRef:
              name: vector-management-service-configs
              key: milvusHost
              optional: false

# -- Vector Management etcd Config
VectorEtcd:
  # -- Vector etcd Name
  name: vector-etcd
  replicaCount: 1
  # -- Default QuayIO Image
  image:
    repository: quay.io/coreos/etcd
    pullPolicy: IfNotPresent
    tag: v3.5.0
  # -- Default namespace
  namespace: ""
  # -- Etcd Resource Config
  resources:
    limits:
      cpu: 1.0
      memory: 2Gi
    requests:
      cpu: 1.0
      memory: 1.5Gi
  # -- Container Ports
  containerPorts:
    etcd: 2379
  # -- Service Account
  serviceAccount:
    create: false
    name: vector-etcd-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30088
    servicePortHttp: 2379
    targetPortHttp: 2379
    servicePortHttpName: vector-etcd-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
  # -- etcd Container Startup Command
  args:
    - etcd
    - -advertise-client-urls=http://127.0.0.1:2379
    - -listen-client-urls
    - http://0.0.0.0:2379
    - --data-dir
    - /etcd
  # -- etcd Env
  env:
    ETCD_AUTO_COMPACTION_MODE: revision
    ETCD_AUTO_COMPACTION_RETENTION: 1000
    ETCD_QUOTA_BACKEND_BYTES: "4294967296"
  # -- etcd PVC Config
  persistence:
    claimName: vector-etcd-pv-claim
    volumeName: vector-etcd-pv
    mountPath: "/etcd"
    hostPath: "/var/backups"
    storageClass: local-storage
    size: 5Gi
    accessModes:
      - ReadWriteOnce
    nodeAffinity:
      required:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                  - minikube

# -- Vector Management Minio Config
VectorMinio:
  # -- Vector Minio Name
  name: vector-minio
  replicaCount: 1
  # -- Default Minio Image
  image:
    repository: minio/minio
    pullPolicy: IfNotPresent
    tag: RELEASE.2020-12-03T00-03-10Z
  # -- Default namespace
  namespace: ""
  # -- Minio Resource Config
  resources:
    limits:
      cpu: 1.0
      memory: 2Gi
    requests:
      cpu: 1.0
      memory: 1.5Gi
  # -- Container Ports
  containerPorts:
    minio: 9000
  # -- Service Account
  serviceAccount:
    create: false
    name: vector-minio-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30089
    servicePortHttp: 9000
    targetPortHttp: 9000
    servicePortHttpName: vector-minio-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
  # -- Minio Container Startup Command
  args:
    - minio
    - server
    - /minio_data
  # -- Minio Env
  env:
    MINIO_ACCESS_KEY: minioadmin
    MINIO_SECRET_KEY: minioadmin
  # -- Minio Readiness Probe
  readinessProbe:
    enabled: true
    command:
      - "curl"
      - "-f"
      - "http://localhost:9000/minio/health/live"
    failureThreshold: 3
    initialDelaySeconds: 20
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 20
  # -- Minio PVC Config
  persistence:
    claimName: vector-minio-pv-claim
    volumeName: vector-minio-pv
    mountPath: "/minio_data"
    hostPath: "/usr/local/games"
    storageClass: local-storage
    size: 5Gi
    accessModes:
      - ReadWriteOnce
    nodeAffinity:
      required:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                  - minikube

# -- Vector Management Milvus Config
VectorMilvus:
  # -- Vector Milvus Name
  name: vector-milvus
  replicaCount: 1
  # -- Default Milvus Image
  image:
    repository: milvusdb/milvus
    pullPolicy: IfNotPresent
    tag: latest
  # -- Default namespace
  namespace: ""
  # -- Milvus Resource Config
  resources:
    limits:
      cpu: 1.0
      memory: 5Gi
    requests:
      cpu: 1.0
      memory: 3Gi
  # -- Container Ports
  containerPorts:
    milvus: 19530
  # -- Service Account
  serviceAccount:
    create: false
    name: vector-milvus-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30090
    servicePortHttp: 19530
    targetPortHttp: 19530
    servicePortHttpName: vector-milvus-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
  # -- Milvus Container Startup Command
  args:
    - milvus
    - run
    - standalone
  # -- Milvus Env
  env:
    ETCD_ENDPOINTS: placeholder_etcdservice
    MINIO_ADDRESS: placeholder_minioservice
  # -- Milvus PVC Config
  persistence:
    claimName: vector-milvus-pv-claim
    volumeName: vector-milvus-pv
    mountPath: "/var/lib/milvus"
    hostPath: "/mnt"
    storageClass: local-storage
    size: 10Gi
    accessModes:
      - ReadWriteOnce
    nodeAffinity:
      required:
        nodeSelectorTerms:
          - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                  - minikube
  # -- Milvus Init Containers
  initContainers:
    - name: wait-for-minio-etcd
      image: busybox
      command: ["/bin/sh", "-c"]
      args:
        [
          "until echo 'Waiting for etcd...' && nc -vz -w 2 $ETCD_HOST 2379 && echo 'Waiting for minio...' && nc -vz -w 2 $MINIO_HOST 9000; do echo 'Looping forever...'; sleep 2; done;",
        ]
      env:
        - name: ETCD_HOST
          valueFrom:
            configMapKeyRef:
              name: vector-milvus-configs
              key: etcdHost
              optional: false
        - name: MINIO_HOST
          valueFrom:
            configMapKeyRef:
              name: vector-milvus-configs
              key: minioHost
              optional: false

# -- Vector Attu Config
VectorAttu:
  name: vector-attu
  # -- Default namespace
  namespace: ""
  # -- Default attu image
  image:
    repository: zilliz/attu
    pullPolicy: IfNotPresent
    tag: latest
  # -- Attu Env
  env:
    MILVUS_URL: placeholder_milvusservice
  # -- Service Account
  serviceAccount:
    create: false
    name: vector-attu-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    attu: 3000
  # -- Resource Limits
  resources:
    limits:
      cpu: 0.5
      memory: 512Mi
    requests:
      cpu: 0.5
      memory: 512Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30091
    servicePortHttp: 3000
    targetPortHttp: 3000
    servicePortHttpName: vector-attu-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
  # -- Vector Attu Init Containers
  initContainers:
    - name: wait-for-milvus
      image: busybox
      command: ["/bin/sh", "-c"]
      args:
        [
          "until echo 'Waiting for vector milvus...' && nc -vz -w 2 $MILVUS_HOST 19530; do echo 'Looping forever...'; sleep 2; done;",
        ]
      env:
        - name: MILVUS_HOST
          valueFrom:
            configMapKeyRef:
              name: vector-attu-configs
              key: milvusHost
              optional: false

# -- UI Service Config (Not used)
UiService:
  name: ui-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/frontend
    pullPolicy: IfNotPresent
    tag: dev
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Frontend Env
  env:
    VITE_AUTH_SERVICE_URL: placeholder
    VITE_VECTOR_SERVICE_URL: placeholder
  # -- Service Account
  serviceAccount:
    create: true
    name: ui-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 3000
  # -- UI Service Container Startup Command
  command: ["/bin/bash"]
  args:
    - -c
    - npm run build && serve -s dist;
  # -- Resource Limits
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30092
    servicePortHttp: 8088
    targetPortHttp: 3000
    servicePortHttpName: ui-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
