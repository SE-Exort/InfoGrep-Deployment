# Default values for infogrep.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# -- Provide a name in place of `infogrep`
nameOverride: infogrep
# -- String to fully override `"infogrep.fullname"`
fullnameOverride: ""
# -- Override the Kubernetes version, which is used to evaluate certain manifests
kubeVersionOverride: ""
# Override APIVersions
# If you want to template helm charts but cannot access k8s API server
# you can set api versions here
apiVersionOverrides: {}
replicaCount: 1
namespace: infogrep
domain: local.infogrep.ai
KeyConfig:
  openaiKey: ""
  serpapiKey: ""

# -- Ai Service Config
AiService:
  name: ai-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/ai-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: ai-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 8004
  # -- Resource Limits
  resources:
   limits:
      cpu: 500m
      memory: 1Gi
   requests:
      cpu: 500m
      memory: 512Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30080
    servicePortHttp: 8004
    servicePortHttpName: ai-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
  # -- Ingress configuration
  ingress:
    enabled: true
    controller: generic
    labels: {}
    annotations:
      nginx.ingress.kubernetes.io/use-regex: "true"
      kubernetes.io/ingress.class: "nginx"
    ingressClassName: nginx
    hostname: ""
    path: /
    pathType: Prefix
    tls: false
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []

# -- Authentication Service Config
AuthService:
  name: auth-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/auth-service
    pullPolicy: IfNotPresent
    tag: dev
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: auth-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 4000
  # -- Resource Limits
  resources:
   limits:
      cpu: 500m
      memory: 1Gi
   requests:
      cpu: 500m
      memory: 512Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30081
    servicePortHttp: 4000
    servicePortHttpName: auth-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
  # -- Authentication Service Init Containers
  initContainers:
    - name: wait-for-postgres
      image: busybox
      command: ["/bin/sh","-c"]
      args: ["until echo 'Waiting for auth service postgres...' && nc -vz -w 2 $PGHOST 5432; do echo 'Looping forever...'; sleep 2; done;"]
      env:
        - name: PGHOST
          valueFrom:
            configMapKeyRef:
              name: auth-service-pg-configs
              key: pgHost
              optional: false

# -- Auth Service Postgres Config
AuthPostgres:
  # -- Auth Postgress Name
  name: auth-postgres
  # -- Default Docker Hub Postgres Image
  image:
    repository: postgres
    pullPolicy: IfNotPresent
    tag: latest
  # -- Default namespace
  namespace: ""
  # -- Postgres Resource Config 
  resources:
    limits:
        cpu: 500m
        memory: 1Gi
    requests:
        cpu: 500m
        memory: 512Mi
  # -- Container Ports
  containerPorts:
    postgres: 5432
  # -- Postgres Readiness Probe
  readinessProbe:
    enabled: true
    command: 
      - "pg_isready" 
      - "-U" 
      - "postgres"
    failureThreshold: 3
    initialDelaySeconds: 10
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30082
    servicePortHttp: 5432
    servicePortHttpName: auth-postgres-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None
  # -- Postgres Env
  env:
    username: postgres
    password: example

# -- Video Service Config
VideoService:
  name: video-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/video-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: video-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 8879
  # -- Resource Limits
  resources:
   limits:
      cpu: 1.0
      memory: 1Gi
   requests:
      cpu: 1.0
      memory: 512Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30083
    servicePortHttp: 8879
    servicePortHttpName: video-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None

# -- Chatroom Service Config
ChatroomService:
  name: chatroom-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/chatroom-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: chatroom-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 8003
  # -- Resource Limits
  resources:
   limits:
      cpu: 500m
      memory: 1Gi
   requests:
      cpu: 500m
      memory: 512Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30084
    servicePortHttp: 8003
    servicePortHttpName: chatroom-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None

# -- Parsing Service Config
ParsingService:
  name: parsing-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/parsing-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: parsing-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 8001
  # -- Resource Limits
  resources:
   limits:
      cpu: 500m
      memory: 1Gi
   requests:
      cpu: 500m
      memory: 512Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30085
    servicePortHttp: 8001
    servicePortHttpName: parsing-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None

# -- File Management Service Config
FileManagementService:
  name: file-management-service
  # -- Default namespace
  namespace: ""
  # -- GHCR Config
  image:
    repository: ghcr.io/se-exort/file-management-service
    pullPolicy: IfNotPresent
    tag: latest
  # -- GHCR Image Pull Secret
  imagePullSecrets:
    - name: ghcr
  # -- Service Account
  serviceAccount:
    create: true
    name: file-management-service-account
    annotations: {}
    labels: {}
    automountServiceAccountToken: true
  # -- Container Ports
  containerPorts:
    server: 8002
  # -- Resource Limits
  resources:
   limits:
      cpu: 500m
      memory: 1Gi
   requests:
      cpu: 500m
      memory: 512Mi
  # -- K8s Service Configuration
  service:
    annotations: {}
    labels: {}
    type: NodePort
    nodePortHttp: 30086
    servicePortHttp: 8002
    servicePortHttpName: file-management-service-port
    servicePortHttpsAppProtocol: ""
    loadBalancerClass: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalIPs: []
    externalTrafficPolicy: Cluster
    sessionAffinity: None